from __future__ import annotations

import re
from typing import Any

from attrs import define, field

from cloudshell.cp.gcp.helpers.errors import BaseGCPError


class BaseGCPDeploymentAppAttributeNames:
    region = "Region"
    zone = "Zone"
    machine_type = "Machine Type"
    maintenance = "On Host Maintenance"
    auto_restart = "Automatic Restart"
    ip_forwarding = "IP Forwarding"
    network = "Network"
    sub_network = "Sub Network"
    custom_tags = "Custom Tags"
    autoload = "Autoload"
    autogenerated_name = "Autogenerated Name"


class GCPFromScratchDeploymentAppAttributeNames(BaseGCPDeploymentAppAttributeNames):
    # disk_image_type = "Disk Image Type"
    disk_type = "Disk Type"
    disk_size = "Disk Size"
    disk_rule = "Disk Deletion Rule"
    project_cloud = "OS Project"
    disk_image = "Disk Image"


class GCPFromTemplateDeploymentAppAttributeNames(GCPFromScratchDeploymentAppAttributeNames):  # noqa E501
    template_name = "Template Name"


class GCPFromVMImageDeploymentAppAttributeNames(BaseGCPDeploymentAppAttributeNames):
    machine_image = "Machine Image"


@define
class ResourceAttrRODeploymentPath:
    name: str
    default: Any = None

    def get_key(self, instance) -> str:
        dp = instance.DEPLOYMENT_PATH
        return f"{dp}.{self.name}"

    def __get__(self, instance, owner):
        if instance is None:
            return self

        return instance.attributes.get(self.get_key(instance), self.default)


class ResourceBoolAttrRODeploymentPath(ResourceAttrRODeploymentPath):
    TRUE_VALUES = {"true", "yes", "y"}
    FALSE_VALUES = {"false", "no", "n"}

    def __get__(self, instance, owner):
        val = super().__get__(instance, owner)
        if val is self or val is self.default or not isinstance(val, str):
            return val
        if val.lower() in self.TRUE_VALUES:
            return True
        if val.lower() in self.FALSE_VALUES:
            return False
        raise ValueError(f"{self.name} is boolean attr, but value is {val}")


class ResourceListAttrRODeploymentPath(ResourceAttrRODeploymentPath):
    def __init__(self, name, sep=";", default=None):
        if default is None:
            default = []
        super().__init__(name, default)
        self._sep = sep

    def __get__(self, instance, owner):
        val = super().__get__(instance, owner)
        if val is self or val is self.default or not isinstance(val, str):
            return val
        return list(filter(bool, map(str.strip, val.split(self._sep))))


class ResourceIntAttrRODeploymentPath(ResourceAttrRODeploymentPath):
    def __get__(self, instance, owner) -> int:
        val = super().__get__(instance, owner)
        if val is self or val is self.default:
            return val
        return int(val) if val else None


class ResourceFloatAttrRODeploymentPath(ResourceAttrRODeploymentPath):
    def __get__(self, instance, owner) -> float:
        val = super().__get__(instance, owner)
        if val is self or val is self.default:
            return val
        return float(val) if val else None
