from __future__ import annotations

from cloudshell.cp.core.request_actions import DeployVMRequestActions
from cloudshell.cp.core.request_actions.models import DeployApp

from cloudshell.cp.gcp.helpers import constants
from cloudshell.cp.gcp.helpers.network_tag_helper import NetworkTagHelper
from cloudshell.cp.gcp.models.attributes import (
    ResourceAttrRODeploymentPath,
    ResourceBoolAttrRODeploymentPath,
    ResourceIntAttrRODeploymentPath,
    BaseGCPDeploymentAppAttributeNames,
    GCPFromScratchDeploymentAppAttributeNames,
    GCPFromTemplateDeploymentAppAttributeNames,
    GCPFromVMImageDeploymentAppAttributeNames,
)

CUSTOM_NSG_RULE_NAME_TPL = (
    "rule-{vm_name}-{dst_address}-"
    "{dst_port_range}-{protocol}"
)


class InboundPortsAttrRO(ResourceAttrRODeploymentPath):
    def __get__(self, instance, owner):
        if instance is None:
            return self
        helper = NetworkTagHelper()

        attr = instance.attributes.get(self.get_key(instance), self.default)
        return [port_data.strip() for port_data in attr.split(";") if port_data]


class BaseGCPDeployApp(DeployApp):
    _DO_NOT_EDIT_APP_NAME = True
    ATTR_NAMES = BaseGCPDeploymentAppAttributeNames

    region = ResourceAttrRODeploymentPath(ATTR_NAMES.region)
    zone = ResourceAttrRODeploymentPath(ATTR_NAMES.zone)
    machine_type = ResourceAttrRODeploymentPath(ATTR_NAMES.machine_type)
    maintenance = ResourceAttrRODeploymentPath(ATTR_NAMES.maintenance)
    auto_restart = ResourceBoolAttrRODeploymentPath(ATTR_NAMES.auto_restart)
    ip_forwarding = ResourceBoolAttrRODeploymentPath(ATTR_NAMES.ip_forwarding)
    inbound_ports = InboundPortsAttrRO(ATTR_NAMES.inbound_ports)
    custom_tags = ResourceAttrRODeploymentPath(ATTR_NAMES.custom_tags)
    wait_for_ip = ResourceBoolAttrRODeploymentPath(ATTR_NAMES.wait_for_ip)
    add_public_ip = ResourceBoolAttrRODeploymentPath(ATTR_NAMES.add_public_ip)
    autoload = ResourceBoolAttrRODeploymentPath(ATTR_NAMES.autoload)
    autogenerated_name = ResourceBoolAttrRODeploymentPath(ATTR_NAMES.autogenerated_name)


class InstanceFromScratchDeployApp(BaseGCPDeployApp):
    ATTR_NAMES = GCPFromScratchDeploymentAppAttributeNames

    DEPLOYMENT_PATH = constants.VM_FROM_SCRATCH_DEPLOYMENT_PATH

    # disk_image_type = ResourceAttrRODeploymentPath(ATTR_NAMES.disk_image_type)
    disk_type = ResourceAttrRODeploymentPath(ATTR_NAMES.disk_type)
    disk_size = ResourceIntAttrRODeploymentPath(ATTR_NAMES.disk_size)
    # disk_rule = ResourceAttrRODeploymentPath(ATTR_NAMES.disk_rule)
    disk_rule = True
    project_cloud = ResourceAttrRODeploymentPath(ATTR_NAMES.project_cloud)
    disk_image = ResourceAttrRODeploymentPath(ATTR_NAMES.disk_image)


class InstanceFromTemplateDeployApp(InstanceFromScratchDeployApp):
    ATTR_NAMES = GCPFromTemplateDeploymentAppAttributeNames

    DEPLOYMENT_PATH = constants.VM_FROM_TEMPLATE_DEPLOYMENT_PATH
    template_name = ResourceAttrRODeploymentPath(ATTR_NAMES.template_name)


class InstanceFromMachineImageDeployApp(BaseGCPDeployApp):
    ATTR_NAMES = GCPFromVMImageDeploymentAppAttributeNames

    DEPLOYMENT_PATH = constants.VM_FROM_MACHINE_IMAGE_DEPLOYMENT_PATH
    machine_image = ResourceAttrRODeploymentPath(ATTR_NAMES.machine_image)


class GCPDeployVMRequestActions(DeployVMRequestActions):
    deploy_app: BaseGCPDeployApp
